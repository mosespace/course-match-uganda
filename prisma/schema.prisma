// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  DEVELOPER
  ADMIN
}

enum SubjectCategory {
  SCIENCES
  ARTS
}

enum CourseLevel {
  CERTIFICATE
  DIPLOMA
  BACHELORS
  MASTERS
  PHD
}

enum CourseStatus {
  UnderReview
  Active
}

enum UniversityStatus {
  Public
  Private
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  emailVerified        DateTime?
  token                String?
  image                String?
  isMachine            Boolean   @default(false)
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  role                 Role      @default(STUDENT)
  
  // Student-specific fields (only populated when role = STUDENT)
  dateOfBirth          DateTime?
  gender               String?
  address              String?
  schoolAttended       String?
  completionYear       Int?
  preferredCampuses    University[]
  subjectIds           String[]
  subjectCombinations  SubjectCombination[]

  // Developer-specific fields (only populated when role = DEVELOPER)
  companyName          String?
  website              String?
  apiKey               String?   @unique
  apiKeyExpiry         DateTime?
  isApproved           Boolean   @default(false)
  requestLogs          ApiRequestLog[]

  // Admin-specific fields (only populated when role = ADMIN)
  permissions          Json?

  // System fields
  lockedAt             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt()

  // Relations
  feedbacks    Feedback[]
  favorites    Favorite[]
  accounts     Account[]
  sessions     Session[]
  activityLogs ActivityLog[] @relation("UserActivityLog")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String?
  details     Json?
  createdAt   DateTime @default(now())

  user User @relation("UserActivityLog", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  createdAt  DateTime @default(now())
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id        String   @id @default(cuid())
  message   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model University {
  id          String           @id @default(cuid())
  slug        String           @unique
  name        String
  description String?
  status      UniversityStatus @default(Public)
  district    String?
  website     String?
  logo        String?          @default("https://1k60xyo2z1.ufs.sh/f/Guex3D2XmynflHpmmO9BbCEUzjguTyNW9iB7PtwY4XZVAxL5")

  // Relations
  courses  Course[]
  students User[] // Students who selected this university as preferred

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id               String        @id @default(cuid())
  name             String
  description      String?
  code             String?
  slug             String        @unique
  status           CourseStatus? @default(Active)
  accreditedDate   DateTime?
  expiryDate       DateTime?
  requiredSubjects Subject[]     @relation("CourseRequiredSubjects")
  duration         Int?
  level            CourseLevel?  @default(CERTIFICATE)

  // Relations
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  favorites    Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id          String          @id @default(cuid())
  name        String          @unique
  code        String          @unique
  description String?
  category    SubjectCategory @default(SCIENCES)

  // Relations
  requiredByCourses Course[] @relation("CourseRequiredSubjects")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubjectCombination {
  id          String @id @default(cuid())
  name        String
  description String?

  // Relations
  students User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id       String @id @default(cuid())
  userId   String
  courseId String

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model ApiRequestLog {
  id           String @id @default(cuid())
  userId       String // Changed from developerId to userId
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int
  ipAddress    String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  timestamp DateTime @default(now())
}